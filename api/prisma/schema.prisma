// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model departments {
  id         Int      @id @default(autoincrement())
  name       String
  users      users[]
  permissionsFrom department_permissions[] @relation("FromDepartment")
  permissionsTo department_permissions[] @relation("ToDepartment")
  requests   requests[]
  updated    DateTime @default(now())
  created    DateTime @default(now())
  deleted    Boolean  @default(false)
}

model enterprises {
  id         Int      @id @default(autoincrement())
  name       String
  requests   requests[]
  updated    DateTime @default(now())
  created    DateTime @default(now())
  deleted    Boolean  @default(false)
}

model materials {
  id         Int      @id @default(autoincrement())
  name       String
  requestMaterials requests_materials[]
  updated    DateTime @default(now())
  created    DateTime @default(now())
  deleted    Boolean  @default(false)
}

model status {
  id         Int      @id @default(autoincrement())
  name       String
  requests   requests[]
  statusHistories status_history[]
  updated    DateTime @default(now())
  created    DateTime @default(now())
  deleted    Boolean  @default(false)
}

model urgency_level {
  id         Int      @id @default(autoincrement())
  name       String
  requests   requests[]
  updated    DateTime @default(now())
  created    DateTime @default(now())
  deleted    Boolean  @default(false)
}

model users {
  id             Int       @id @default(autoincrement())
  name           String
  login          String
  password       String
  departments    departments? @relation(fields: [departments_id], references: [id])
  departments_id Int?
  requests       requests[]
  updated        DateTime  @default(now())
  created        DateTime  @default(now())
  deleted        Boolean   @default(false)
}

model department_permissions {
  id                 Int         @id @default(autoincrement())
  from_department    departments  @relation("FromDepartment", fields: [from_department_id], references: [id])
  from_department_id Int
  to_department      departments  @relation("ToDepartment", fields: [to_department_id], references: [id])
  to_department_id   Int
  updated            DateTime    @default(now())
  created            DateTime    @default(now())
  deleted            Boolean     @default(false)
}

model requests {
  id             Int       @id @default(autoincrement())
  users           users      @relation(fields: [user_id], references: [id])
  user_id        Int
  departments     departments @relation(fields: [department_id], references: [id])
  department_id  Int
  enterprises     enterprises @relation(fields: [enterprise_id], references: [id])
  enterprise_id  Int
  status         status    @relation(fields: [status_id], references: [id])
  status_id      Int
  urgency_level     urgency_level @relation(fields: [urgency_level_id], references: [id])
  urgency_level_id  Int
  description    String?
  requestMaterials requests_materials[]
  status_history  status_history[]
  updated        DateTime  @default(now())
  created        DateTime  @default(now())
  deleted        Boolean   @default(false)
}

model requests_materials {
  id                Int       @id @default(autoincrement())
  requests           requests   @relation(fields: [request_id], references: [id])
  request_id        Int
  materials          materials  @relation(fields: [material_id], references: [id])
  material_id       Int
  // urgency_level     urgency_level @relation(fields: [urgency_level_id], references: [id])
  // urgency_level_id  Int
  // status            status    @relation(fields: [status_id], references: [id])
  // status_id         Int
  quantity          Int
  arrival_date      DateTime?
  updated           DateTime  @default(now())
  created           DateTime  @default(now())
  deleted           Boolean   @default(false)
}

model status_history {
  id             Int       @id @default(autoincrement())
  requests        requests   @relation(fields: [request_id], references: [id])
  request_id     Int
  status         status    @relation(fields: [status_id], references: [id])
  status_id      Int
  updated        DateTime  @default(now())
}


